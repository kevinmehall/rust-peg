use translate::*;
use std::char;

pub items -> Vec<Item> = __ items:item* { items }

rule -> Rule
  = legacy_exported:exportflag cached:cacheflag public:pubflag name:identifier returns: returntype equals expression:expression semicolon? {
      Rule{
        name: name,
        expr: Box::new(expression),
        ret_type: returns,
        exported: public || legacy_exported,
        cached: cached
      }
    }

    pubflag -> bool = PUB { true } / "" { false }
    exportflag -> bool = #quiet<("#[export]" / "#[pub]") __ {true} / "" {false}>
    cacheflag -> bool = "#[cache]" __ {true} / {false}

template -> Template
  = name:identifier lt params:(identifier ** comma) gt equals expression:expression semicolon? {
    Template { name: name, params: params, expr: Box::new(expression) }
  }

item -> Item
  = u:rust_use     { Item::Use(u) }
  / r:rule         { Item::Rule(r) }
  / t:template     { Item::Template(t) }
  / grammar_args

  grammar_args -> Item
    = "#![" __ "arguments" __ lparen args:(grammar_argument**comma) rparen "]" __
    { Item::GrammarArgs(args) }

    grammar_argument -> (String, String)
      = i:identifier colon t:type_string { (i, t) }


type_string -> String = tp:$rust_type __ { tp.to_owned() }

returntype -> String
  = returns tp:type_string { tp }
  / { "()".to_string() }

rust_identifier = #quiet<[a-zA-Z_][a-zA-Z0-9_]*> / #expected("identifier")

rust_use -> String
  = v:$(USE rust_path __ (
    "::" __ "*" __
    / "::" __ "{" __ ((rust_identifier __ ("as" __ rust_identifier __ )?) ++ ("," __)) "}" __
    / ("as" __ rust_identifier)?
  ) ";") __ { v.to_owned() }

rust_path = rust_identifier ++ (__ "::" __)

rust_type
  = "[" __ rust_type __ "]"
  / "&" __ ("mut" __)? ("'" rust_identifier __)? rust_type
  / rust_identifier __ "<" __ (("'" rust_identifier) / rust_type) ** (__ "," __) __ ">"
  / rust_identifier __ "::" __ rust_type
  / "(" __ rust_type ** (__ "," __) __ ")"
  / rust_identifier

expression -> Expr
  = choice

choice -> Expr
  = head:sequence tail:(slash s:sequence {s})* {
      if tail.len() > 0 {
        let mut list = tail;
        list.insert(0, head);
        ChoiceExpr(list)
      } else {
        head
      }
    }

sequence -> Expr
  = elements:labeled* code:action {
      ActionExpr(elements, code.0, code.1)
    }
  / elements:prefixed* {
      if elements.len() != 1 {
          SequenceExpr(elements)
      } else {
          elements.into_iter().next().unwrap()
      }
    }

labeled -> TaggedExpr
  = label:identifier colon expression:prefixed {
      TaggedExpr{ name: Some(label), expr: Box::new(expression) }
    }
  / expr: prefixed {
      TaggedExpr{ name: None, expr: Box::new(expr) }
  }

prefixed -> Expr
  = dollar expression:suffixed {
      MatchStrExpr(Box::new(expression))
    }
  / and expression:suffixed {
      PosAssertExpr(Box::new(expression))
    }
  / not expression:suffixed {
      NegAssertExpr(Box::new(expression))
    }
  / suffixed

suffixed -> Expr
  = e:primary question {
       OptionalExpr(Box::new(e))
    }
  / e:primary starstar count:repeatcount sep:primary {
      Repeat(Box::new(e), count, Some(Box::new(sep)))
    }
  / e:primary plusplus sep:primary {
      Repeat(Box::new(e), BoundedRepeat::Plus, Some(Box::new(sep)))
    }
  / e:primary star count:repeatcount {
      Repeat(Box::new(e), count, None)
    }
  / e:primary plus {
      Repeat(Box::new(e), BoundedRepeat::Plus, None)
    }
  / primary

repeatcount -> BoundedRepeat
  = lt n:repeatnum gt { BoundedRepeat::Exact(n) }
  / lt min:repeatnum? comma max:repeatnum? gt { BoundedRepeat::Both(min, max) }
  / "" { BoundedRepeat::None }

repeatnum -> String
  = i:integer __ { i.to_string() }
  / lbrace e:rust_expr rbrace {e}

#[cache]
primary -> Expr
  = name:identifier !lt !returns !equals {
      RuleExpr(name)
    }
  / name:identifier lt args:(expression ** comma) gt !equals {
      TemplateInvoke(name, args)
    }
  / literal
  / class
  / dot { AnyCharExpr }
  / "#=" lbrace runtime_match:rust_expr rbrace { RuntimeMatchExpr(runtime_match) }
  / "#" lbrace runtime:rust_expr rbrace { RuntimeExpr(runtime) } 
  / "#position" __ { PositionExpr }
  / "#quiet" __ lt e:expression gt { QuietExpr(Box::new(e)) }
  / "#expected" __ lparen s:doubleQuotedString rparen { FailExpr(s) }
  / "#infix" __ lt atom:expression gt lbrace levels:infix_level+ rbrace
        { InfixExpr{ atom: Box::new(atom), levels:levels }}
  / lparen expression:expression rparen { expression }

infix_level -> InfixLevel
  = assoc:("#L" { InfixAssoc::Left } / "#R" { InfixAssoc::Right} ) __ operators:infix_op+
  { InfixLevel{ assoc: assoc, operators: operators} }

infix_op -> InfixOperator
  = l:identifier op:(var:identifier colon {var})? e:primary r:identifier lbrace action:rust_expr rbrace
  { InfixOperator{ operator:Box::new(e), action: action, l_arg:l, op_arg:op, r_arg:r } }

/* "Lexical" elements */

rust_expr -> String
   = literal:$((braced / nonBraceCharacters)*) { format!("{{ {} }}", literal) }

action -> (String, /*is conditional match?*/ bool)
  = "{" cond:"?"? literal:rust_expr "}" __ {
     (literal, cond.is_some())
  }

braced = "{" ((braced / nonBraceCharacters)*) "}"
nonBraceCharacters = [^{}]+

equals    = "="  __
colon     = ":"  __
semicolon = ";"  __
slash     = "/"  __
and       = "&"  __
not       = "!"  __
dollar    = "$"  __
question  = "?"  __
star      = "*"  __
starstar  = "**" __
plus      = "+"  __
plusplus  = "++" __
lparen    = "("  __
rparen    = ")"  __
dot       = "."  __
returns   = "->" __
lbrace    = "{"  __
rbrace    = "}"  __
comma     = ","  __
lt        = "<"  __
gt        = ">"  __

KEYWORD<k> = k !([a-zA-Z0-9_]) __
USE = KEYWORD<"use">
PUB = KEYWORD<"pub">

keyword = USE / PUB

integer -> usize
  = i:$([0-9]+) __ { i.parse().unwrap() }

identifier -> String
  = #quiet<!keyword chars:$([a-zA-Z_][a-zA-Z0-9_]*) __ { chars.to_owned() }> / #expected("identifier")

/*
 * Modeled after ECMA-262, 5th ed., 7.8.4. (syntax & semantics, rules only
 * vaguely).
 */
literal -> Expr
  = value:(doubleQuotedString / singleQuotedString) case_insensitive:"i"? __ {
      LiteralExpr(value,case_insensitive.is_some())
    }

string -> String
  = string:(doubleQuotedString / singleQuotedString) __ { string }

doubleQuotedString -> String
  = '"' s:doubleQuotedCharacter* '"' { s.into_iter().collect() }

doubleQuotedCharacter -> char
  = simpleDoubleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hex2EscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleDoubleQuotedCharacter -> char
  = !('"' / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

singleQuotedString -> String
  = "'" s:singleQuotedCharacter* "'" { s.into_iter().collect() }

singleQuotedCharacter -> char
  = simpleSingleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hex2EscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleSingleQuotedCharacter -> char
  = !("'" / "\\" / eolChar) c:$. { c.chars().next().unwrap() }

class -> Expr
  = "[" inverted:"^"? parts:(classCharacterRange / classCharacter)* "]" flags:"i"? __ {
      CharSetExpr(inverted.is_some(), parts)
    }

classCharacterRange -> CharSetCase
  = begin:bracketDelimitedCharacter "-" end:bracketDelimitedCharacter {
      //TODO: check start > end
      CharSetCase{start:begin, end:end}
    }

classCharacter -> CharSetCase
  = char_:bracketDelimitedCharacter {
      CharSetCase{start:char_, end:char_}
    }

bracketDelimitedCharacter -> char
  = simpleBracketDelimitedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hex2EscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleBracketDelimitedCharacter -> char
  = !("]" / "\\" / eolChar) c:$(.) { c.chars().next().unwrap() }

simpleEscapeSequence -> char
  = "\\" !(digit / "x" / "u" / eolChar) c:$(.) {
      match c.chars().next().unwrap() {
        //'b' => '\b',
        //'f' => '\f',
        'n' => '\n',
        'r' => '\r',
        't' => '\t',
        //'v' => '\v',
         x  => x
      }
    }

zeroEscapeSequence -> char
  = "\\0" !digit { 0u8 as char }

hex2EscapeSequence -> char
  = "\\x" value:$(hexDigit hexDigit) {
      char::from_u32(u32::from_str_radix(value, 16).unwrap()).unwrap()
    }

unicodeEscapeSequence -> char
  = "\\u{" value:$(hexDigit+) "}" {
      char::from_u32(u32::from_str_radix(value, 16).unwrap()).unwrap()
    }

eolEscapeSequence -> char
  = "\\" eol { '\n' }

digit
  = [0-9]

hexDigit
  = [0-9a-fA-F]

__ = #quiet<(whitespace / eol / comment)*>

/* Modeled after ECMA-262, 5th ed., 7.4. */
comment
  = singleLineComment
  / multiLineComment

singleLineComment
  = "//" (!eolChar .)*

multiLineComment
  = "/*" (!"*/" .)* "*/"

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

eolChar
  = [\n\r\u{2028}\u{2029}]

/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed
